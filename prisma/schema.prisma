// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ----------- Core Models -----------

model Employee {
  id          String   @id @default(uuid())
  name        String
  department  String?
  position    String?
  hireDate    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ppeRecords    PpeRecord[]
  asoRecords    AsoRecord[]
  trainings     TrainingRecord[]
  accidents     AccidentRecord[]
  diseases      OccupationalDiseaseRecord[]

  @@map("employees")
}

model TrainingType {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String?
  validityMonths  Int?     // How many months the training is valid for (null means no expiry)
  requiredNrsJson String?  // Store as JSON string: ["NR-35", "NR-10"]
  defaultDuration Int?     // Default duration in hours
  defaultLocation String?
  defaultCost     Float?   // Default cost in local currency
  instructorsJson String?  // Store as JSON string: ["Instructor A", "Company B"]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation
  trainingRecords TrainingRecord[]

  @@map("training_types")
}


model TrainingRecord {
  id                String   @id @default(uuid())
  employeeId        String
  trainingTypeId    String
  trainingDate      DateTime
  expiryDate        DateTime? // Calculated based on TrainingType.validityMonths
  status            String   @default("Valido") // Valido, Vencido, Proximo_ao_Vencimento - Calculated field
  attendanceListUrl String?  // URL/Path to the scanned attendance list
  certificateUrl    String?  // URL/Path to the scanned certificate
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  employee     Employee     @relation(fields: [employeeId], references: [id])
  trainingType TrainingType @relation(fields: [trainingTypeId], references: [id])

  @@index([employeeId])
  @@index([trainingTypeId])
  @@map("training_records")
}

model PpeRecord { // Personal Protective Equipment
  id           String    @id @default(uuid())
  employeeId   String
  ppeType      String // e.g., "Capacete", "Luvas de Proteção"
  caNumber     String? // Certificado de Aprovação
  deliveryDate DateTime
  quantity     Int       @default(1)
  returnDate   DateTime?
  status       String    @default("Em_Uso") // Em_Uso, Devolvido, Descartado
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relation
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@map("ppe_records")
}

model AsoRecord { // Atestado de Saúde Ocupacional
  id            String   @id @default(uuid())
  employeeId    String
  examType      String   // Admissional, Periodico, Demissional, Mudanca_de_Risco, Retorno_ao_Trabalho
  examDate      DateTime
  expiryDate    DateTime // Date the ASO expires
  result        String   // Apto, Inapto, Apto_com_Restricoes
  status        String   @default("Valido") // Valido, Vencido, Proximo_ao_Vencimento - Calculated field
  attachmentUrl String?  // URL/Path to the scanned ASO
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@map("aso_records")
}


model ChemicalRecord { // Chemical Inventory
  id           String   @id @default(uuid())
  productName  String
  casNumber    String?  // Chemical Abstracts Service number
  location     String   // Storage location
  quantity     Float    // Amount
  unit         String   // kg, L, g, mL, unid
  sdsUrl       String?  // Safety Data Sheet URL/Path
  lastUpdated  DateTime // Last inventory check/update date
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("chemical_records")
}


model JsaRecord { // Job Safety Analysis / Risk Assessment Record
  id            String   @id @default(uuid())
  taskName      String   // Name of the task/activity being analyzed
  department    String   // Department responsible
  analysisDate  DateTime
  reviewDate    DateTime? // Date for next review
  status        String   @default("Ativo") // Ativo, Em_Revisao, Arquivado
  attachmentUrl String?  // Link to the JSA document (PDF, Word, etc.)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation to Risk Items
  risks RiskItem[]

  @@map("jsa_records")
}

model RiskItem { // Risk identified within a JSA
  id          String  @id @default(uuid())
  jsaId       String
  description String  // Description of the risk (e.g., "Queda de altura")
  controls    String  // Control measures (e.g., "Uso de cinto, linha de vida")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  jsa JsaRecord @relation(fields: [jsaId], references: [id], onDelete: Cascade) // Cascade delete risks if JSA is deleted

  @@index([jsaId])
  @@map("risk_items")
}

model CipaMeeting { // CIPA Meeting Record
  id               String   @id @default(uuid())
  date             DateTime
  participantsJson String?  // JSON string array of participant names
  agenda           String   // Meeting agenda/topics discussed
  status           String   @default("Agendada") // Agendada, Realizada, Cancelada
  minutesUrl       String?  // URL/Path to the meeting minutes document
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relation to Actions Defined
  actionsDefined CipaAction[]

  @@map("cipa_meetings")
}

model CipaAction { // Action defined during a CIPA meeting
  id          String   @id @default(uuid())
  description String
  responsible String   // Person/Department responsible
  deadline    DateTime?
  status      String   @default("Pendente") // Pendente, Em_Andamento, Concluida, Atrasada
  meetingId   String   // Link back to the CipaMeeting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  meeting CipaMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId])
  @@map("cipa_actions")
}

model PreventiveAction { // Checklist item or recurring preventive task
  id                String   @id @default(uuid())
  description       String
  category          String   // Inspeção, Treinamento, Manutenção, EPI, Procedimento, Outro
  responsible       String   // Person/Department responsible
  frequency         String?  // Diaria, Semanal, Mensal, Trimestral, Semestral, Anual, Unica (If not recurring)
  dueDate           DateTime? // Due date if it's a one-time task or for the next occurrence
  lastCompletedDate DateTime? // Last time this action was performed
  status            String   @default("Pendente") // Pendente, Em_Andamento, Concluida, Atrasada
  evidenceUrl       String?  // URL/Path to evidence of completion (photo, report)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("preventive_actions")
}


model DocumentRecord { // Records for PGR, PCMSO, Laudos etc.
  id            String    @id @default(uuid())
  documentType  String    // PGR, PCMSO, PCA, Laudo_Ergonomico, etc.
  title         String    // e.g., "PGR Nery Mecatrônica 2024"
  issueDate     DateTime  // Date the document was issued/created
  expiryDate    DateTime  // Date the document needs review/renewal
  responsible   String    // Person/Company responsible for elaboration
  status        String    @default("Valido") // Valido, Proximo_ao_Vencimento, Vencido, Em_Revisao - Calculated field
  attachmentUrl String?   // Path/URL to the document file
  observations  String?   // General observations
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relation to Actions
  relatedActions DocumentAction[]

  @@map("document_records")
}

model DocumentAction { // Actions derived from a document (e.g., PGR action plan item)
  id          String   @id @default(uuid())
  description String
  responsible String   // Person/Department responsible
  deadline    DateTime?
  status      String   @default("Pendente") // Pendente, Em_Andamento, Concluida, Atrasada
  documentId  String   // Link back to the DocumentRecord

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  document DocumentRecord @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@map("document_actions")
}


model LawsuitRecord { // Labor Lawsuits related to EHS
  id            String    @id @default(uuid())
  processNumber String    @unique // Court case number
  plaintiff     String    // Person/Entity suing
  subject       String    // Main reason (e.g., Insalubridade, Falta de EPI)
  status        String    @default("Em_Andamento") // Em_Andamento, Acordo, Finalizado_Favoravel, Finalizado_Desfavoravel
  filingDate    DateTime  // Date the lawsuit was filed
  hearingDate   DateTime? // Date of the next hearing
  estimatedCost Float?    // Estimated potential cost
  finalCost     Float?    // Actual cost if finalized/settled
  lawyer        String?
  details       String    // More details about the case
  relatedNRsJson String?   // Store as JSON string: ["NR-15", "NR-6"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lawsuit_records")
}

model AccidentRecord {
  id                  String    @id @default(uuid())
  date                DateTime
  time                String?   // HH:MM format
  employeeId          String
  department          String
  location            String    // Specific location of the accident
  type                String    // Leve, Grave, Fatal, Tipico, Trajeto
  cause               String    // Queda, Choque_Eletrico, Impacto, Corte, Projecao_Particulas, Quimico, Ergonomico, Biologico, Outro
  causeDetails        String?   // More specific cause description
  daysOff             Int       @default(0) // Days of absence from work
  description         String    // Detailed description of the event
  cid10Code           String?   // ICD-10 code if applicable (more common for diseases but can apply)
  catIssued           Boolean   @default(false) // Was the CAT (Comunicação de Acidente de Trabalho) issued?
  investigationStatus String    @default("Pendente") // Pendente, Em_Andamento, Concluida
  reportUrl           String?   // URL/Path to the investigation report
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relation
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@map("accident_records")
}


model OccupationalDiseaseRecord {
  id                String   @id @default(uuid())
  employeeId        String
  diseaseType       String   // e.g., LER/DORT, PAIR, Dermatose
  cid10Code         String   // ICD-10 code
  diagnosisDate     DateTime
  relatedTask       String?  // Task potentially related to the disease
  daysOff           Int      @default(0)
  status            String   @default("Ativo") // Ativo, Afastado, Recuperado
  medicalReportUrl  String?  // URL/Path to the medical report
  pcmsoLink         String?  // Link or ID related to the PCMSO record
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relation
  employee Employee @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
  @@map("occupational_disease_records")
}
