// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Employee {
  id           String @id @default(cuid())
  name         String
  department   String?
  position     String? // Cargo/Função
  admissionDate DateTime? // Data de Admissão

  trainings      TrainingRecord[]
  ppeDeliveries  PpeRecord[]
  asos           AsoRecord[]
  accidents      AccidentRecord[]
  diseases       OccupationalDiseaseRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingType {
  id              String @id @default(cuid())
  name            String @unique // e.g., "NR-35 Trabalho em Altura"
  description     String?
  defaultDuration Int? // Default duration in hours
  defaultLocation String? // Default location address
  defaultCost     Float? // Default cost
  instructorsJson String? // JSON array of strings for instructor names: ["Instructor A", "Instructor B"]

  trainingRecords TrainingRecord[] // Relation to individual records

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingRecord {
  id                  String        @id @default(cuid())
  employeeId          String
  employee            Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  trainingTypeId      String
  trainingType        TrainingType  @relation(fields: [trainingTypeId], references: [id]) // Link to TrainingType
  trainingDate        DateTime
  expiryDate          DateTime?
  status              TrainingStatus // Válido, Vencido, Próximo ao Vencimento
  attendanceListUrl   String?
  certificateUrl      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TrainingStatus {
  Valido
  Vencido
  Proximo_ao_Vencimento
}

model PpeRecord {
  id              String    @id @default(cuid())
  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  ppeType         String // e.g., "Capacete", "Luvas"
  caNumber        String? // Certificado de Aprovação
  deliveryDate    DateTime
  quantity        Int
  returnDate      DateTime?
  status          PpeStatus // Em_Uso, Devolvido, Descartado

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PpeStatus {
  Em_Uso
  Devolvido
  Descartado
}

model AsoRecord {
  id             String       @id @default(cuid())
  employeeId     String
  employee       Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  examType       AsoExamType // Admissional, Periódico, etc.
  examDate       DateTime
  expiryDate     DateTime // Validity date of the ASO
  result         AsoResult // Apto, Inapto, Apto_com_Restricoes
  status         AsoStatus // Válido, Vencido, Proximo_ao_Vencimento
  attachmentUrl  String?   // Link to scanned ASO

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AsoExamType {
  Admissional
  Periodico
  Demissional
  Mudanca_de_Risco
  Retorno_ao_Trabalho
}

enum AsoResult {
  Apto
  Inapto
  Apto_com_Restricoes
}

enum AsoStatus {
  Valido
  Vencido
  Proximo_ao_Vencimento
}


model ChemicalRecord {
  id             String   @id @default(cuid())
  productName    String
  casNumber      String?
  location       String
  quantity       Float
  unit           ChemicalUnit // kg, L, g, mL, unid
  sdsUrl         String? // Safety Data Sheet URL
  lastUpdated    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChemicalUnit {
  kg
  L
  g
  mL
  unid // unidade
}

model JsaRecord {
  id           String    @id @default(cuid())
  taskName     String
  department   String
  analysisDate DateTime
  reviewDate   DateTime?
  status       JsaStatus // Ativo, Em_Revisao, Arquivado
  attachmentUrl String?   // Link to the JSA document

  risks        RiskItem[] // Relation to identified risks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JsaStatus {
  Ativo
  Em_Revisao
  Arquivado
}

// Represents a single risk identified in a JSA
model RiskItem {
  id            String    @id @default(cuid())
  jsaId         String
  jsa           JsaRecord @relation(fields: [jsaId], references: [id], onDelete: Cascade)
  description   String // Description of the risk
  controls      String // Measures to control the risk

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CipaMeeting {
  id               String        @id @default(cuid())
  date             DateTime
  participantsJson String // JSON array of strings for participant names
  agenda           String
  status           CipaMeetingStatus // Agendada, Realizada, Cancelada
  minutesUrl       String? // Link to meeting minutes

  actionsDefined   CipaAction[] // Relation to actions defined in the meeting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CipaMeetingStatus {
  Agendada
  Realizada
  Cancelada
}

model CipaAction {
  id             String       @id @default(cuid())
  meetingId      String?       // Optional: Link to the meeting where it was defined
  meeting        CipaMeeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull)
  description    String
  responsible    String
  deadline       DateTime?
  status         ActionStatus // Pendente, Em_Andamento, Concluida, Cancelada

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PreventiveAction {
  id                String                    @id @default(cuid())
  description       String
  category          PreventiveActionCategory // Inspeção, Treinamento, Manutenção, EPI, Procedimento, Outro
  responsible       String
  frequency         PreventiveActionFrequency? // Diária, Semanal, Mensal, Trimestral, Semestral, Anual, Única
  dueDate           DateTime? // Specific due date if not recurring or for unique actions
  lastCompletedDate DateTime?
  status            ActionStatus // Pendente, Em_Andamento, Concluida, Atrasada
  evidenceUrl       String? // Link to evidence of completion

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PreventiveActionCategory {
  Inspecao
  Treinamento
  Manutencao
  EPI
  Procedimento
  Outro
}

enum PreventiveActionFrequency {
  Diaria
  Semanal
  Mensal
  Trimestral
  Semestral
  Anual
  Unica
}


model DocumentRecord {
  id             String          @id @default(cuid())
  documentType   DocumentType    // PGR, PCMSO, PCA, Laudo_Ergonomico, etc.
  title          String
  issueDate      DateTime
  expiryDate     DateTime
  responsible    String
  status         DocumentStatus  // Válido, Proximo_ao_Vencimento, Vencido, Em_Revisao
  attachmentUrl  String?

  relatedActions DocumentAction[] // Actions derived from this document

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentType {
  PGR
  PCMSO
  PCA
  Laudo_Ergonomico
  Laudo_Insalubridade
  Laudo_Periculosidade
  Outro
}

enum DocumentStatus {
  Valido
  Proximo_ao_Vencimento
  Vencido
  Em_Revisao
}

model DocumentAction {
  id           String        @id @default(cuid())
  documentId   String
  document     DocumentRecord @relation(fields: [documentId], references: [id], onDelete: Cascade)
  description  String
  responsible  String
  deadline     DateTime?
  status       ActionStatus // Pendente, Em_Andamento, Concluida, Cancelada

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ActionStatus {
  Pendente
  Em_Andamento
  Concluida
  Cancelada
  Atrasada // Added for Preventive Actions
}

model LawsuitRecord {
  id            String       @id @default(cuid())
  processNumber String       @unique
  plaintiff     String // Reclamante
  subject       String // Assunto Principal
  status        LawsuitStatus // Em_Andamento, Acordo, Finalizado_Favoravel, Finalizado_Desfavoravel
  filingDate    DateTime // Data de Abertura
  hearingDate   DateTime? // Próxima Audiência
  estimatedCost Float?
  finalCost     Float?
  lawyer        String?
  details       String
  relatedNRsJson String? // JSON array of strings for related NRs: ["NR-15", "NR-6"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LawsuitStatus {
  Em_Andamento
  Acordo
  Finalizado_Favoravel
  Finalizado_Desfavoravel
}

model AccidentRecord {
  id            String     @id @default(cuid())
  date          DateTime
  time          String? // HH:mm format
  employeeId    String?     // Optional if not related to a specific employee (e.g., property damage)
  employee      Employee?  @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  department    String
  location      String
  type          AccidentType // Leve, Grave, Fatal, Trajeto, Tipico
  cause         AccidentCause // Queda, Choque_Eletrico, Impacto, Corte, etc.
  causeDetails  String?
  daysOff       Int // Dias de afastamento
  description   String
  cid10Code     String? // Optional for related injury/disease
  catIssued     Boolean // CAT foi emitida?
  investigationStatus InvestigationStatus // Pendente, Em_Andamento, Concluida
  reportUrl     String? // Link to investigation report

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccidentType {
  Leve
  Grave
  Fatal
  Trajeto // Commute accident
  Tipico // Typical work accident
}

enum AccidentCause {
  Queda
  Choque_Eletrico
  Impacto
  Corte
  Projecao_Particulas
  Quimico
  Ergonomico
  Biologico
  Outro
}

enum InvestigationStatus {
  Pendente
  Em_Andamento
  Concluida
}

model OccupationalDiseaseRecord {
  id               String   @id @default(cuid())
  employeeId       String
  employee         Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  diseaseType      String // e.g., LER/DORT, PAIR
  cid10Code        String // International Classification of Diseases code
  diagnosisDate    DateTime
  relatedTask      String? // Task potentially related to the disease
  daysOff          Int
  status           DiseaseStatus // Ativo, Afastado, Recuperado
  medicalReportUrl String? // Link to medical report
  pcmsoLink        String? // Link or ID to the related PCMSO record/section

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DiseaseStatus {
  Ativo
  Afastado
  Recuperado
}
