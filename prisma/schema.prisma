// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ================================================
//                 Core Data Models
// ================================================

model Employee {
  id             String           @id @default(cuid())
  name           String
  department     String? // Optional: Department the employee belongs to
  position       String? // Optional: Employee's job position
  hireDate       DateTime? // Optional: Date the employee was hired

  // Relations
  trainings       TrainingRecord[]
  ppeRecords     PpeRecord[]
  asoRecords     AsoRecord[]
  accidents      AccidentRecord[]
  diseases       OccupationalDiseaseRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model TrainingType {
  id                 String           @id @default(cuid())
  name               String           @unique // e.g., "NR-35 Trabalho em Altura"
  description        String?
  validityMonths     Int?             // How many months the training is valid for (null means no expiry)
  requiredNrsJson    String?          // JSON string array of associated Normas Regulamentadoras e.g., ["NR-35", "NR-10"]
  defaultDuration    Int?             // Default duration in hours
  defaultLocation    String?          // Default location (e.g., "Sala Treinamento A", "Online")
  defaultCost        Float?           // Default cost per participant
  instructorsJson    String?          // JSON string array of default instructor names e.g., ["João Silva", "Empresa XYZ"]

  // Relations
  records TrainingRecord[] // A training type can have many records

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model TrainingRecord {
  id                  String    @id @default(cuid())
  employeeId          String    // Foreign key for Employee
  trainingTypeId      String    // Foreign key for TrainingType
  trainingDate        DateTime
  expiryDate          DateTime? // Date the training certificate expires
  status              String    // Status (Valido, Vencido, Proximo_ao_Vencimento) - Calculated field, might not be needed in DB
  attendanceListUrl   String?   // URL/Path to the scanned attendance list
  certificateUrl      String?   // URL/Path to the scanned certificate

  // Relations
  employee            Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  trainingType        TrainingType @relation(fields: [trainingTypeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([employeeId])
   @@index([trainingTypeId])
}

model PpeRecord {
  id             String    @id @default(cuid())
  employeeId     String    // Foreign key for Employee
  ppeType        String    // e.g., "Capacete de Segurança", "Luvas Nitrílicas"
  deliveryDate   DateTime
  caNumber       String?   // Certificado de Aprovação (CA) number
  quantity       Int       @default(1)
  returnDate     DateTime? // Date the PPE was returned
  status         String    // Status like 'Em uso', 'Devolvido', 'Descartado'

  // Relations
  employee       Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model AsoRecord {
  id             String    @id @default(cuid())
  employeeId     String    // Foreign key for Employee
  examType       String    // Admissional, Periodico, Demissional, Mudanca_de_Risco, Retorno_ao_Trabalho
  examDate       DateTime
  expiryDate     DateTime  // ASOs typically have an expiry date
  result         String    // Apto, Inapto, Apto_com_Restricoes
  status         String    // Valido, Vencido, Proximo_ao_Vencimento (Calculated)
  attachmentUrl  String?   // Optional URL for the scanned ASO

  // Relations
  employee       Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([employeeId])
}

model ChemicalRecord {
  id             String    @id @default(cuid())
  productName    String
  casNumber      String?   // Chemical Abstracts Service number
  location       String    // Storage location
  quantity       Float     // Use Float for quantities like 1.5 L
  unit           String    // kg, L, g, mL, unid
  sdsUrl         String?   // Safety Data Sheet URL
  lastUpdated    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JsaRecord {
  id             String    @id @default(cuid())
  taskName       String    // Name of the task/activity being analyzed
  department     String    // Department responsible
  analysisDate   DateTime
  reviewDate     DateTime? // Date for next review
  status         String    // Ativo, Em_Revisao, Arquivado
  attachmentUrl  String?   // Link to the JSA document (PDF, Word, etc.)

  // Relations
  risks RiskItem[] // A JSA has multiple risk items

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RiskItem {
  id             String    @id @default(cuid())
  jsaId          String    // Foreign key for JsaRecord
  stepNumber     Int?      // Optional step number in the task
  description    String    // Description of the risk
  controls       String    // Description of the control measures

  // Relations
  jsa            JsaRecord @relation(fields: [jsaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jsaId])
}

model CipaMeeting {
  id                 String    @id @default(cuid())
  date               DateTime
  participantsJson   String?   // JSON string array of participant names
  agenda             String
  status             String    // Agendada, Realizada, Cancelada
  minutesUrl         String?   // Link to the meeting minutes document

  // Relations
  actionsDefined CipaAction[] // A meeting can define multiple actions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CipaAction {
  id             String    @id @default(cuid())
  meetingId      String?    // Foreign key for CipaMeeting (optional if action can exist independently)
  description    String
  responsible    String
  deadline       DateTime?
  status         String    // Pendente, Em_Andamento, Concluida, Atrasada

  // Relations
  meeting        CipaMeeting? @relation(fields: [meetingId], references: [id], onDelete: SetNull) // Action can remain even if meeting is deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([meetingId])
}

model PreventiveAction {
  id                 String    @id @default(cuid())
  description        String
  category           String    // Inspecao, Treinamento, Manutencao, EPI, Procedimento, Outro
  responsible        String
  frequency          String?   // Diaria, Semanal, Mensal, Trimestral, Semestral, Anual, Unica
  dueDate            DateTime? // Due date (especially for 'Unica' or if overdue)
  lastCompletedDate  DateTime? // Date the action was last completed
  status             String    // Pendente, Em_Andamento, Concluida, Atrasada
  evidenceUrl        String?   // URL/Path to evidence of completion

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentRecord {
  id             String    @id @default(cuid())
  documentType   String    // PGR, PCMSO, PCA, Laudo_Ergonomico, etc.
  title          String
  issueDate      DateTime
  expiryDate     DateTime
  responsible    String    // Person/Dept responsible for elaboration/review
  status         String    // Valido, Proximo_ao_Vencimento, Vencido, Em_Revisao
  attachmentUrl  String?   // Path/URL to the document file
  observations   String?   // General observations

  // Relations
  relatedActions DocumentAction[] // A document can have related actions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentAction {
  id             String    @id @default(cuid())
  documentId     String    // Foreign key for DocumentRecord
  description    String
  responsible    String
  deadline       DateTime?
  status         String    // Pendente, Em_Andamento, Concluida, Atrasada

  // Relations
  document       DocumentRecord @relation(fields: [documentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   @@index([documentId])
}

model LawsuitRecord {
  id             String    @id @default(cuid())
  processNumber  String    @unique // Lawsuit identification number
  plaintiff      String    // Person/Entity filing the lawsuit
  subject        String    // Main subject (e.g., Insalubridade, Acidente)
  status         String    // Em_Andamento, Acordo, Finalizado_Favoravel, Finalizado_Desfavoravel
  filingDate     DateTime  // Date the lawsuit was filed
  hearingDate    DateTime? // Next hearing date
  estimatedCost  Float?    // Estimated financial impact
  finalCost      Float?    // Actual final cost after conclusion
  lawyer         String?
  details        String
  relatedNrsJson String?   // JSON string array NRs mentioned or related to the case e.g., ["NR-15", "NR-6"]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AccidentRecord {
  id                   String    @id @default(cuid())
  date                 DateTime
  time                 String?   // Optional: Time of the accident
  employeeId           String    // Foreign key for Employee
  department           String
  location             String    // Specific location of the accident
  type                 String    // Leve, Grave, Fatal, Tipico, Trajeto
  cause                String    // Queda, Choque_Eletrico, Impacto, Corte, etc.
  causeDetails         String?   // More specific details about the cause
  daysOff              Int       @default(0) // Days of absence from work
  description          String
  cid10Code            String?   // Optional: ICD-10 code if applicable
  catIssued            Boolean   @default(false) // Whether CAT (Comunicado de Acidente de Trabalho) was issued
  investigationStatus  String    // Pendente, Em_Andamento, Concluida
  reportUrl            String?   // Optional: URL/Path to the investigation report

  // Relations
  employee             Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}

model OccupationalDiseaseRecord {
  id                  String    @id @default(cuid())
  employeeId          String    // Foreign key for Employee
  diseaseType         String    // e.g., LER/DORT, PAIR, Dermatose
  cid10Code           String    // ICD-10 code for the disease
  diagnosisDate       DateTime
  relatedTask         String?   // Task/activity related to the disease
  daysOff             Int       @default(0)
  status              String    // Ativo, Afastado, Recuperado
  medicalReportUrl    String?   // Optional: URL/Path to the medical report
  pcmsoLink           String?   // Optional: Link or ID related to the PCMSO record

  // Relations
  employee            Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([employeeId])
}


// ================================================
//                Supporting Models (if any)
// ================================================
// Example: User model for authentication if implemented later
// model User {
//   id        String   @id @default(cuid())
//   username  String   @unique
//   password  String   // Hashed password
//   role      String   // e.g., ADMIN, USER
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
