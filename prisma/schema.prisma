// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// -- Core Models --

model Employee {
  id            String  @id @default(cuid())
  name          String
  department    String?
  role          String?
  hireDate      DateTime?
  // Relations
  trainings     TrainingRecord[]
  ppeDeliveries PpeRecord[]
  asos          AsoRecord[]
  accidents     AccidentRecord[]
  diseases      OccupationalDiseaseRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingType {
  id              String  @id @default(cuid())
  name            String  @unique
  description     String?
  defaultDuration Int? // Optional default duration in hours
  defaultLocation String? // Optional default location
  defaultCost     Float? // Optional default cost
  instructorsJson String? // JSON string to store array of instructor names
  // Relations
  records         TrainingRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainingRecord {
  id                  String    @id @default(cuid())
  employeeId          String
  trainingTypeId      String
  trainingDate        DateTime
  expiryDate          DateTime?
  attendanceListUrl   String? // URL for the scanned attendance list
  certificateUrl      String? // URL for the scanned certificate
  status              String // Valido, Vencido, Proximo_ao_Vencimento (Calculated)

  // Relations
  employee            Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  trainingType        TrainingType @relation(fields: [trainingTypeId], references: [id], onDelete: Restrict) // Prevent deleting type if records exist

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PpeRecord {
  id           String    @id @default(cuid())
  employeeId   String
  ppeType      String // Consider creating a PpeType model if details are needed
  deliveryDate DateTime
  caNumber     String? // Certificado de Aprovação
  quantity     Int
  returnDate   DateTime?
  status       String // Em uso, Devolvido, Descartado

  // Relations
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AsoExamType {
  Admissional
  Periodico
  Demissional
  Mudanca_de_Risco
  Retorno_ao_Trabalho
}

enum AsoResult {
  Apto
  Inapto
  Apto_com_Restricoes
}

model AsoRecord {
  id            String      @id @default(cuid())
  employeeId    String
  examType      AsoExamType
  examDate      DateTime
  expiryDate    DateTime
  result        AsoResult
  status        String // Valido, Vencido, Proximo_ao_Vencimento (Calculated)
  attachmentUrl String? // URL for the scanned ASO

  // Relations
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -- Additional Modules --

enum ChemicalUnit {
  kg
  L
  g
  mL
  unid
}

model ChemicalRecord {
  id          String       @id @default(cuid())
  productName String
  casNumber   String?
  location    String
  quantity    Float
  unit        ChemicalUnit
  sdsUrl      String? // Safety Data Sheet URL
  lastUpdated DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JsaStatus {
  Ativo
  Em_Revisao
  Arquivado
}

model JsaRecord {
  id           String    @id @default(cuid())
  taskName     String
  department   String
  analysisDate DateTime
  reviewDate   DateTime?
  status       JsaStatus
  attachmentUrl String? // Link to the JSA document
  risks        RiskItem[] // Relation to risks

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Separate model for Risks within a JSA
model RiskItem {
  id          String @id @default(cuid())
  description String
  controls    String
  jsaId       String
  jsa         JsaRecord @relation(fields: [jsaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum CipaMeetingStatus {
  Agendada
  Realizada
  Cancelada
}

enum ActionStatus {
  Pendente
  Em_Andamento
  Concluida
  Atrasada // Added for overdue actions
}


model CipaMeeting {
  id               String            @id @default(cuid())
  date             DateTime
  participantsJson String? // JSON array of participant names
  agenda           String
  status           CipaMeetingStatus
  minutesUrl       String? // Link to the meeting minutes file
  actionsDefined   CipaAction[] // Relation to actions defined in this meeting

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CipaAction {
  id          String       @id @default(cuid())
  description String
  responsible String
  deadline    DateTime?
  status      ActionStatus
  meetingId   String
  meeting     CipaMeeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PreventiveActionCategory {
  Inspecao
  Treinamento
  Manutencao
  EPI
  Procedimento
  Outro
}

enum PreventiveActionFrequency {
  Diaria
  Semanal
  Mensal
  Trimestral
  Semestral
  Anual
  Unica
}

model PreventiveAction {
  id                String                   @id @default(cuid())
  description       String
  category          PreventiveActionCategory
  responsible       String
  frequency         PreventiveActionFrequency?
  dueDate           DateTime? // Due date for 'Unica' or if overdue
  lastCompletedDate DateTime?
  status            ActionStatus
  evidenceUrl       String? // Link to evidence file/photo

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentType {
  PGR
  PCMSO
  PCA
  Laudo_Ergonomico
  Laudo_Insalubridade
  Laudo_Periculosidade
  Outro
}

enum DocumentStatus {
  Valido
  Proximo_ao_Vencimento
  Vencido
  Em_Revisao
}

model DocumentRecord {
  id             String         @id @default(cuid())
  documentType   DocumentType
  title          String
  issueDate      DateTime
  expiryDate     DateTime
  responsible    String
  status         DocumentStatus
  attachmentUrl  String?
  relatedActions DocumentAction[] // Relation to actions related to this document

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DocumentAction {
  id          String       @id @default(cuid())
  description String
  responsible String
  deadline    DateTime?
  status      ActionStatus
  documentId  String
  document    DocumentRecord @relation(fields: [documentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LawsuitStatus {
  Em_Andamento
  Acordo
  Finalizado_Favoravel
  Finalizado_Desfavoravel
}

model LawsuitRecord {
  id            String        @id @default(cuid())
  processNumber String        @unique
  plaintiff     String // Claimant (Reclamante)
  subject       String
  status        LawsuitStatus
  filingDate    DateTime
  hearingDate   DateTime?
  estimatedCost Float?
  finalCost     Float?
  lawyer        String?
  details       String
  relatedNRsJson String? // JSON array of related NR strings (e.g., ["NR-15", "NR-6"])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AccidentType {
  Leve
  Grave
  Fatal
  Tipico
  Trajeto
}

enum AccidentCause {
  Queda
  Choque_Eletrico
  Impacto
  Corte
  Projecao_Particulas
  Quimico
  Ergonomico
  Biologico
  Outro
}

enum InvestigationStatus {
  Pendente
  Em_Andamento
  Concluida
}

model AccidentRecord {
  id                  String              @id @default(cuid())
  date                DateTime
  time                String? // HH:MM format
  employeeId          String
  department          String
  location            String
  type                AccidentType
  cause               AccidentCause
  causeDetails        String?
  daysOff             Int
  description         String
  cid10Code           String?
  catIssued           Boolean // CAT = Comunicação de Acidente de Trabalho
  investigationStatus InvestigationStatus
  reportUrl           String? // Link to investigation report

  // Relations
  employee            Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OccupationalDiseaseRecord {
  id               String   @id @default(cuid())
  employeeId       String
  diseaseType      String // e.g., LER/DORT, PAIR
  cid10Code        String
  diagnosisDate    DateTime
  relatedTask      String?
  medicalReportUrl String?
  daysOff          Int
  status           String // e.g., Ativo, Afastado, Recuperado
  pcmsoLink        String? // Optional link/ID to related PCMSO record

  // Relations
  employee         Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
