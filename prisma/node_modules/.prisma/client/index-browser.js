
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department: 'department',
  position: 'position',
  hireDate: 'hireDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  validityMonths: 'validityMonths',
  requiredNrsJson: 'requiredNrsJson',
  defaultDuration: 'defaultDuration',
  defaultLocation: 'defaultLocation',
  defaultCost: 'defaultCost',
  instructorsJson: 'instructorsJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TrainingRecordScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  trainingTypeId: 'trainingTypeId',
  trainingDate: 'trainingDate',
  expiryDate: 'expiryDate',
  status: 'status',
  attendanceListUrl: 'attendanceListUrl',
  certificateUrl: 'certificateUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PpeRecordScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  ppeType: 'ppeType',
  caNumber: 'caNumber',
  deliveryDate: 'deliveryDate',
  quantity: 'quantity',
  returnDate: 'returnDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AsoRecordScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  examType: 'examType',
  examDate: 'examDate',
  expiryDate: 'expiryDate',
  result: 'result',
  status: 'status',
  attachmentUrl: 'attachmentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChemicalRecordScalarFieldEnum = {
  id: 'id',
  productName: 'productName',
  casNumber: 'casNumber',
  location: 'location',
  quantity: 'quantity',
  unit: 'unit',
  sdsUrl: 'sdsUrl',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JsaRecordScalarFieldEnum = {
  id: 'id',
  taskName: 'taskName',
  department: 'department',
  analysisDate: 'analysisDate',
  reviewDate: 'reviewDate',
  status: 'status',
  attachmentUrl: 'attachmentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RiskItemScalarFieldEnum = {
  id: 'id',
  jsaId: 'jsaId',
  description: 'description',
  controls: 'controls',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CipaMeetingScalarFieldEnum = {
  id: 'id',
  date: 'date',
  participantsJson: 'participantsJson',
  agenda: 'agenda',
  status: 'status',
  minutesUrl: 'minutesUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CipaActionScalarFieldEnum = {
  id: 'id',
  description: 'description',
  responsible: 'responsible',
  deadline: 'deadline',
  status: 'status',
  meetingId: 'meetingId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PreventiveActionScalarFieldEnum = {
  id: 'id',
  description: 'description',
  category: 'category',
  responsible: 'responsible',
  frequency: 'frequency',
  dueDate: 'dueDate',
  lastCompletedDate: 'lastCompletedDate',
  status: 'status',
  evidenceUrl: 'evidenceUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentRecordScalarFieldEnum = {
  id: 'id',
  documentType: 'documentType',
  title: 'title',
  issueDate: 'issueDate',
  expiryDate: 'expiryDate',
  responsible: 'responsible',
  status: 'status',
  attachmentUrl: 'attachmentUrl',
  observations: 'observations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentActionScalarFieldEnum = {
  id: 'id',
  description: 'description',
  responsible: 'responsible',
  deadline: 'deadline',
  status: 'status',
  documentId: 'documentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LawsuitRecordScalarFieldEnum = {
  id: 'id',
  processNumber: 'processNumber',
  plaintiff: 'plaintiff',
  subject: 'subject',
  status: 'status',
  filingDate: 'filingDate',
  hearingDate: 'hearingDate',
  estimatedCost: 'estimatedCost',
  finalCost: 'finalCost',
  lawyer: 'lawyer',
  details: 'details',
  relatedNRsJson: 'relatedNRsJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccidentRecordScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time: 'time',
  employeeId: 'employeeId',
  department: 'department',
  location: 'location',
  type: 'type',
  cause: 'cause',
  causeDetails: 'causeDetails',
  daysOff: 'daysOff',
  description: 'description',
  cid10Code: 'cid10Code',
  catIssued: 'catIssued',
  investigationStatus: 'investigationStatus',
  reportUrl: 'reportUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OccupationalDiseaseRecordScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  diseaseType: 'diseaseType',
  cid10Code: 'cid10Code',
  diagnosisDate: 'diagnosisDate',
  relatedTask: 'relatedTask',
  daysOff: 'daysOff',
  status: 'status',
  medicalReportUrl: 'medicalReportUrl',
  pcmsoLink: 'pcmsoLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Employee: 'Employee',
  TrainingType: 'TrainingType',
  TrainingRecord: 'TrainingRecord',
  PpeRecord: 'PpeRecord',
  AsoRecord: 'AsoRecord',
  ChemicalRecord: 'ChemicalRecord',
  JsaRecord: 'JsaRecord',
  RiskItem: 'RiskItem',
  CipaMeeting: 'CipaMeeting',
  CipaAction: 'CipaAction',
  PreventiveAction: 'PreventiveAction',
  DocumentRecord: 'DocumentRecord',
  DocumentAction: 'DocumentAction',
  LawsuitRecord: 'LawsuitRecord',
  AccidentRecord: 'AccidentRecord',
  OccupationalDiseaseRecord: 'OccupationalDiseaseRecord'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
