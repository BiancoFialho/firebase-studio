'use server';
/**
 * @fileOverview Provides a Genkit flow that demonstrates using both DeepSeek (for code generation)
 * and Google AI (Gemini for text generation/translation) in a single operation.
 *
 * - hybridAnalysisFlow - A flow function for combined AI tasks.
 * - HybridAnalysisInput - Input type for the hybrid flow.
 * - HybridAnalysisOutput - Output type for the hybrid flow.
 */

import { defineFlow, runFlow } from 'genkit';
import { z } from 'zod';
import { generateCodeWithDeepseek } from './deepseek-flow'; // Import the wrapper
import { ai } from './ai-instance'; // Import the configured Genkit instance for Gemini

// Define Zod schemas for input and output
export const HybridAnalysisInputSchema = z.object({
  codePrompt: z.string().describe('Prompt for DeepSeek to generate code (e.g., SQL query)'),
  textPrompt: z.string().describe('Prompt for Gemini (e.g., text to translate, question to answer)'),
});
export type HybridAnalysisInput = z.infer<typeof HybridAnalysisInputSchema>;

export const HybridAnalysisOutputSchema = z.object({
  generatedCode: z.string().describe('Code generated by DeepSeek'),
  generatedText: z.string().describe('Text generated or processed by Gemini'),
});
export type HybridAnalysisOutput = z.infer<typeof HybridAnalysisOutputSchema>;

// Define the hybrid Genkit flow
export const hybridAnalysisFlow = defineFlow(
  {
    name: 'hybridAnalysisFlow',
    inputSchema: HybridAnalysisInputSchema,
    outputSchema: HybridAnalysisOutputSchema,
  },
  async (input: HybridAnalysisInput): Promise<HybridAnalysisOutput> => {
    console.log("Starting hybrid flow...");
    console.log("Input:", input);

    try {
      // Run DeepSeek code generation and Gemini text generation in parallel
      const [codeResult, textResult] = await Promise.all([
        generateCodeWithDeepseek(input.codePrompt),
        ai.generate({ prompt: input.textPrompt }), // Use the main 'ai' instance for Gemini
      ]);

       console.log("DeepSeek Result:", codeResult);
       console.log("Gemini Result:", textResult); // Log the raw Gemini result

      const generatedText = textResult?.output ? String(textResult.output) : 'Gemini generation failed or produced no output.'; // Extract text output safely

      return {
        generatedCode: codeResult,
        generatedText: generatedText,
      };
    } catch (error) {
      console.error("Error in hybrid flow:", error);
       if (error instanceof Error) {
         throw new Error(`Hybrid flow failed: ${error.message}`);
       } else {
           throw new Error('An unknown error occurred during the hybrid flow.');
       }
    }
  }
);

// Export a wrapper function for easier invocation
export async function runHybridAnalysis(input: HybridAnalysisInput): Promise<HybridAnalysisOutput> {
  return runFlow(hybridAnalysisFlow, input);
}
