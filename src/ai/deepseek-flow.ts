'use server';
/**
 * @fileOverview Provides a Genkit flow to interact with the DeepSeek API, specifically for code generation tasks.
 *
 * - deepseekCodeGeneration - A flow function that takes a prompt and returns code generated by DeepSeek.
 * - DeepseekInputSchema - Input schema for the flow (string prompt).
 * - DeepseekOutputSchema - Output schema for the flow (string containing generated code).
 */

import { defineFlow, runFlow } from 'genkit';
import { z } from 'zod';
// Use dynamic import for node-fetch to ensure compatibility with different environments
// let fetch: typeof import('node-fetch').default;
// import('node-fetch').then(mod => fetch = mod.default);
import fetch from 'node-fetch'; // Direct import might work in Node.js environments used by Genkit/Next.js Server Components

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'; // Use the chat completions endpoint


// Define Zod schemas for input and output
export const DeepseekInputSchema = z.string().describe('Prompt for code generation');
export type DeepseekInput = z.infer<typeof DeepseekInputSchema>;

export const DeepseekOutputSchema = z.string().describe('Generated code');
export type DeepseekOutput = z.infer<typeof DeepseekOutputSchema>;


export const deepseekCodeGeneration = defineFlow(
  {
    name: 'deepseekCodeGeneration',
    inputSchema: DeepseekInputSchema,
    outputSchema: DeepseekOutputSchema,
  },
  async (prompt: DeepseekInput): Promise<DeepseekOutput> => {
    if (!fetch) {
       throw new Error("node-fetch failed to load dynamically.");
    }
    if (!DEEPSEEK_API_KEY) {
      throw new Error('DEEPSEEK_API_KEY is not set in the environment variables.');
    }

    console.log("Sending request to DeepSeek API...");
    console.log("Prompt:", prompt);

    try {
      const response = await fetch(DEEPSEEK_API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        },
        body: JSON.stringify({
          model: 'deepseek-coder', // Recommended model for coding tasks
          messages: [
            { role: 'system', content: 'You are a helpful assistant that generates code based on user requests.' },
            { role: 'user', content: prompt }
          ],
          max_tokens: 1024, // Adjust token limit as needed
          temperature: 0.7, // Adjust creativity vs. precision
        }),
      });

      console.log("DeepSeek API Response Status:", response.status);

      if (!response.ok) {
        const errorBody = await response.text();
        console.error("DeepSeek API Error Body:", errorBody);
        throw new Error(`DeepSeek API Error: ${response.status} ${response.statusText} - ${errorBody}`);
      }

      const data: any = await response.json(); // Type assertion might be needed depending on strictness
      console.log("DeepSeek API Response Data:", JSON.stringify(data, null, 2));


      // Adjust access based on the actual structure of the DeepSeek API response
      if (data.choices && data.choices.length > 0 && data.choices[0].message && data.choices[0].message.content) {
         return data.choices[0].message.content.trim();
      } else {
           console.error("Unexpected DeepSeek API response format:", data);
           throw new Error('Failed to parse code from DeepSeek response. Unexpected format.');
      }
    } catch (error) {
      console.error("Error calling DeepSeek API:", error);
       if (error instanceof Error) {
         throw new Error(`Failed to call DeepSeek API: ${error.message}`);
       } else {
         throw new Error(`An unknown error occurred while calling DeepSeek API.`);
       }
    }
  }
);

// Export a wrapper function for easier invocation from Next.js components
export async function generateCodeWithDeepseek(prompt: DeepseekInput): Promise<DeepseekOutput> {
    return runFlow(deepseekCodeGeneration, prompt);
}
